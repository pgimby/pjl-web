#!/usr/bin/python3

'''
Can be called from the command line to make a wide range of changes to the lab repository xml file.
Change include

Adding versions of labs from a new semester
Adding a brand new lab to repository

color scheme
	red ERROR - FATAL
	green DEBUG
	cyan INPUT
	yellow WARNING

'''

'''Verison History

1.4 added the ability to customize the name give to a kit when only part of the kit is used.

'''
import pjlDB
import os, argparse, re, color
#import sys
#from termcolor import colored, cprint

version = "1.4.2"

#Fucntion that preform safety checks

def testHost(host):
	'''
	Test what computer this being run on. As of now it is machinne specific
	
	Args:
		host (str) name of host script was designed for
	
	Return:
		none
	'''
	thishost = os.uname()[1]
	if thishost not in host:
		print(color.red("[ERROR] ") + "This script is designed to be run on " + host + " only. Exiting...")
		exit()


def checkTimeStamp(dev,data):
	'''
	Checks that the source files for the databases referenced are the latest. This protects against overwritting changes by mistake

	Args:
		dev (str) location of a file
		data (str) location of a file

	Return:
		(bool) True if file at data is newer than the one at dev
	'''
	if os.path.getmtime(data) <= os.path.getmtime(dev):
		return True
	else:
		return False


#Functions used to add a new version entry to the repositorsy xml


'''creats a new empty lab object'''
def getLabObject(labdb):
	'''
	Used to generate a pjl lab object from the labDB.xml database

	Args:
		labdb (pjlDB.labDB) entire lab database object generated by pjlDB

	Return:
		lab (pjlDB._LabItem) individual lab item generated by pjlDB
	'''
	if debug: print(color.green("[Debug - getLabObject] entering"))
	validID = False
	while not validID:
		idnum = input(color.yellow("Enter lab ID number: "))
		if len(idnum) == 4 and idnum.isdigit() == True:
			try:
				lab = labdb.getLab(idnum)
				validID = True
			except pjlDB.IDDoesNotExist: ### not working properly
				print("Message")
		else:
			print(color.red("[ERROR] ") + "ID formate in not valid. Valid IDs are of the form ####. Please try again")
			validID = False
	if debug: print(color.green("[Debug - getLabObject] leaving"))
	return lab


'''collects information about new version of an existing lab'''
def getVersionInfo(originalItem,validCourses,validSemesters,semesterKeys,eqdb,disciplineSource,topicSource,softwareSource,testMode):
	'''
	Main function that collects information for new version of lab entry

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
		validCourses (list) list of valid courses
		validSemesters (list) list of valid semesters
		semesterKeys (dict) dictionary that matches semesters with their abreviations
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		disiplineSource (str) path of file that contains all valid disciplines
		topicSource (str) path of file that contains all valid topics
		testMode (bool) allows script to be run in testing mode. No output written.
	
	Return:
		new_version (dict) dictionary that contains information needed for pjlDB package and a version of a lab to an existing lab.
	'''
	print("Adding version to \"" + originalItem.name + "\".")
	new_version = {}
	#new_version = {'originalDir': '/home/pgimby/labs/under-construction/211SP2018/lab2/', 'pdf': 'Phys 211_221 - Labatorial 02 - P2018.pdf', 'course': 'PHYS 211', 'semester': 'Spring', 'year': '2018', 'directory': '/data/repository/0003-Motion-on-the-Inclined-Plane/0003-PHYS211SP2018/', 'path': '/data/repository/0003-Motion-on-the-Inclined-Plane/0003-PHYS211SP2018/Phys 211_221 - Labatorial 02 - P2018.pdf'}
	new_version["idnum"] = originalItem.id_num
	new_version["name"] = originalItem.name
	new_version["type"] = originalItem.lab_type
	print("")
	new_version["originalDir"] = getOriginalDir()
	print("")	
	new_version["pdf"] = getOriginalPdf(new_version["originalDir"])
	print("")
	new_version["course"] = validCourse(validCourses)
	print("")
	new_version["semester"] = validSemester(validSemesters) 
	print("")
	new_version["year"] = validYear()
	new_version["directory"],new_version["labFolder"] = validExistingDirectory(new_version,originalItem,semesterKeys)
	new_version["path"] = validPdfPath(new_version)
	new_version["equipment"] = getEquipList(eqdb,originalItem)
	print("")
	new_version["software"] = getSoftwareList(originalItem,softwareSource)
	print("")
	new_version['disciplines'] = getDisciplineList(originalItem,disciplineSource)
	print("")
	new_version['topics'] = getTopicList(originalItem,topicSource)
	return new_version

def getOriginalDir():
	'''
	Asks user for location of folder containing new lab, and check that it exists

	Args:
		none

	Return:
		originalDir (str) location of folder containing new lab
	'''
	validDir = False
	while not validDir:
		originalDir = input(color.yellow("Enter absolute path for directory containing lab: "))
		if not originalDir.split("/")[-1] == "":
			originalDir = originalDir + "/"
		print(originalDir)
		if os.path.isdir(originalDir):
			validDir = True
		else:
			print("Directory " + originalDir + " does not exist. Please try again.")
	return originalDir

def getOriginalPdf(dir):
	'''
	Asks user for name of lab pdf file, and check that it exists

	Args:
		dir (str) pathname of the folder that the pdf should be in

	Return:
		pdfName (str) location of pdf file for new lab
	'''
	validPath = False
	while not validPath:
		pdfName = input(color.yellow("Enter the name of the student version pdf: "))
		if os.path.isfile(dir + pdfName):
			validPath = True	
		else:
			print("PDF does not exist. Please try again.")
	return pdfName




def validCourse(validCourses):
	'''
	Asks user to enter the course the lab was used in, and checks it against a list of valid courses

	Args:
		validCourses (list) list of valid courses

	Return:
		course (str) valid course number
	'''
	validCourse = False
	while not validCourse:
		courseNum = str(input(color.yellow("Enter course number: ")))
		for i in validCourses:
			if courseNum == i:
				course = "PHYS " + courseNum
				validCourse = True
		if not validCourse:
			print("Invalid Course number")
			print("Valid courses are...")
			for i in validCourses:
				print(i)
	return course

def validSemester(validSemesters):
	'''
	Asks user to enter the semester the lab was used in, and checks it against a list of valid semesters

	Args:
		validSemesters (list) list of valid courses

	Return:
		semesterName (str) valid semester name
	'''
	validSemester = False
	while not validSemester:
		semesterName = str(input(color.yellow("Enter semester: "))).capitalize()
		for i in validSemesters:
			if semesterName == i:
				validSemester = True
		if not validSemester:
			print("Invalid semester")
			print("Valid semesters are...")
			for i in validSemesters:
				print(i)
	return semesterName

def validYear():
	'''
	Asks user to enter the year the lab was used in, and checks that it is a valid year

	Args:
		none

	Return:
		year (str) valid 4 digit year
	'''
	validYear = False
	while not validYear:
		year = input(color.yellow("Enter year: "))
		if len(year) == 4 and year.isdigit() == True:
			validYear = True
		else:
			print("Year is invalid.")
	return year

def validExistingDirectory(new_version,lab,semesterKeys):
	'''
	Takes information entered from user, and determines the name of the folder that will
	contain version of lab that will be added. This uses knowledge of other version folder
	that have already been added. Will not work for a new Lab (see function versionFolder)

	Args:
		new_version (dict) information entered by user
		lab (pjlDB._LabItem) individual lab item generated by pjlDB
		semesterKeys (dict) matches abreviations for semesters with full name
	
	Return:
		directory (str) full path name on new version directory
	'''
	samplePath = lab.versions[0]["directory"]
	labFolder = "/".join(samplePath.split("/")[:-1]) + "/"
	semester = semesterKeys[new_version["semester"]]
	courseNum = new_version["course"].split(" ")[-1]
	year = new_version["year"]
	directory = labFolder + lab.id_num + "-PHYS" + courseNum + semester + year
	return directory,labFolder

def validPdfPath(new_version):
	'''
	Asks user to input the path to the pdf to display on the webpage for this version

	Args:
		new_version (dict) information entered by user

	Return:
		path (str) final path to pdf
	'''
	validPath = False
	while not validPath:
		pdfName = new_version["pdf"]
		if os.path.isfile(new_version["originalDir"] + pdfName):
			validPath = True	
			path = new_version["directory"] + "/" + pdfName
		else:
			print("PDF does not exist. Please try again.")
	return path


def getEquipList(eqdb,originalItem):
	'''
	generates a list of equipment

	Args:
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB

	Return:
		equipItems (list of dictionaries)
	'''
	if debug: print(color.green("[Debug - getEquipList]  entering"))
	print("")
	if input(color.yellow("Would you like to edit the equipment list for this lab? y/N ")).lower() == "y":
		print("")
		print("Current Equipment List")
		print("-------------------")
		for i in originalItem.equipment:
			# i['alt-name'] = "TEST NAME"
			# i['alt-id'] = "0000"
			print(i['id'] + " " + i['name'] + " [" + i['alt-id'] + " " + i['alt-name'] + "] " + " (" + i['amount'] + ")")
		equipItems = []
		equipItems = equipInfoReview(eqdb,originalItem)
		allItems = False
		while not allItems:
			print("")
			if input(color.yellow("Would you like to add a new piece of equipment for this lab? y/N ")).lower() == "y":
				itemId = input(color.yellow("Enter the equipment id number: "))
				equipItems.append(addEquipItem(eqdb,itemId))
			else:
				allItems = True
	else:
		equipItems = originalItem.equipment
	if debug: print(color.green("[Debug - getEquipList]  leaving"))
	return equipItems

def equipInfoReview(eqdb,originalItem):
	'''
	Controls the review and editing of equipment list. Asks user to input id numbers and 
	quantity of equipment needed for the new lab. User also can input an alternate/secondary 
	equipment item for each primary item
	
	Input id numbers are check for correctness

	Args:
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
	
	Return:
		equipItems (list of dictionaries)
	'''
	if debug: print(color.green("[Debug - equipInfoReview]  entering"))
	equipItems = []
	if originalItem.equipment:
		for i in originalItem.equipment:
			print("ID Number ["  + i['id'] + "]: Name [" + i['name'] + "]: Alternate Name: [" + i['alt-name'] + "]: Amount [" + i['amount'] + "]" )
			if input (color.yellow("Would you like to edit this entry? y/N: ")).lower() == "y":
				equipID = input("Enter new id number [" + i['id'] + "], enter 'delete' to remove this item ")
				if equipID == "":
					equipID = i['id']
				if not equipID == "delete":
					item = addEquipItem(eqdb,equipID)
					print("enter editing code here")
				else:
					print("deleting " + i['id'] + " " + i['name'])
			else:
				equipItems.append(i)
	if debug: print(color.green("[Debug - equipInfoReview]  leaving"))
	return equipItems
	
def addEquipItem(eqdb,itemId):
	'''
	Adds a new piece of equipment to a lab object

	Args:
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		itemId (str) equipment id number entered by user

	Return:
		equipItem (dict) dicitonary for single equipment item
	'''
	if debug: print(color.green("[Debug - addEquipIten]  entering"))
	equipItem = {}
	validItem = False
	validAlt = False
	validNum = False
	itemName = ""
	altName = ""
	amount = ""

	# adds main item
	while not validItem:
		if itemId == "retry":
			itemId = input(color.yellow("Enter the equipment id number: "))
		validItem,itemName,itemError = equipValid(eqdb,itemId)
		if not validItem:
			print(itemError)
			if input(color.yellow("Do you wish to try again? Y/n: ")).lower() == "n":
				break
			else:
				itemId = "retry"
		else:
			equipItem['id'] = itemId
			equipItem['name'] = itemName
			validItem = True

	# adds alternate item
	while not validAlt:
		altId = input(color.yellow("Enter id number of an alternate for this item. If none hit Enter. "))
		if not altId == "":
			validAlt,altName,altError = equipValid(eqdb,altId)
			if not validAlt:
				print(altError)
				if input(color.yellow("Do you wish to try again? Y/n: ")).lower() == "n":
					break
				else:
					altId = ""
					altName = ""
					validAlt = False
			else:
				equipItem['alt-name'] = altName
				equipItem['alt-id'] = altId
				validAlt = True
		else:
			equipItem['alt-name'] = ""
			equipItem['alt-id'] = ""
			validAlt = True
	
	# adds the number of units needed
	while not validNum:
		amount = input(color.yellow("Please enter how many " + itemName + "(s) are needed? "))
		if amount.isdigit():
			equipItem['amount'] = amount
			validNum=True
		else:
			print(color.cyan(amount + " is not a valid number."))
			if input(color.yellow("Do you wish to try again? Y/n: ")).lower() == "n":
				break
		equipItem["id"]  = itemId
	return equipItem

def equipValid(eqdb,itemID):
	'''
	Checks if equipment item added by user for new lab is valid

	Args:
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		itemID (str) Id number of equipment item to add

	Return:
		validItem (bool)
		name (str) Name of equipment item
		errorMessage (str) Information on why a equipment entry is invalid
	'''
	if debug: print(color.green("[Debug - equipValid]  entering"))
	errorMessage = ""
	if len(itemID) == 4 and itemID.isdigit() == True:
		try:
			item = eqdb.getItem(idnum=itemID)
			if item.is_kit:
				name = equipNameOptions(item)
			else:
				name = item.name
			errorMessage = ""
			return True, name, errorMessage
		except pjlDB.EQIDDoesNotExist as e:
			errorMessage = ("Invalid Equipment: Item " + itemID + " does not exist.")
			name = "null"
			return False, name, errorMessage
	else:
		errorMessage = ("Invalid Equipment: Id needs to be a 4 digit number")
		name = "null"
		return False, name, errorMessage

def equipNameOptions(item):
	'''
	Sometimes a piece of a equipment is a piece of the kit. In these cases it can be useful for the name
	in the equipment list to appear as the part, but keep the equipment id number of the kit. This function
	allows the user to choose a name from the list of components in a kit.

	Args:
		item (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB

	Return:
		name (str) Name of equipment item
	'''
	if debug: print(color.green("[Debug - equipNameOptions]  entering"))
	print()
	print(color.yellow("What name you would like displayed for this item? Pick a number [default = 0]."))
	print()
#	print("[0] " + item.name)

	kitItems = item.kit.split(",")
	kitItems[:0] = [item.name]
	for i in range(0, len(kitItems)):
		index = str(i)
		print("[" + index + "] " + kitItems[i].strip())
	validName = False
	while not validName:
		#selection = int(input(color.yellow("Please Choose a Name for This Item? [0] ")))
		selection = input(color.yellow("Please Choose a Name for This Item? [0] "))
		if selection == "":
			selection = 0
		elif selection.isdigit():
			selection = int(selection)
		#else
		#print(selection)
		


		if debug: print(color.green("[Debug - equipNameOptions] selection " + str(selection)))
		#if 1 <= selection <= len(kitItems) + 1:
		if 0 <= selection <= len(kitItems):
			name = kitItems[selection].strip()
			validName = True
		elif selection == 0:
			name = item.name
			validName = True
		else:
			print(selection + " is not a option.")
			if input(color.yellow("Do you wish to try again? Y/n: ")).lower() == "n":
				exit()
	return name


def getSoftwareList(originalItem,softwareSource):
	'''
	generates a list of software

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
		softwareSource (string) path to file containing list of available software

	Return:
		softwareItems (list) valid software
	'''
	softwareItems = []
	if input(color.yellow("Would you like to edit the software list for this lab? y/N ")).lower() == "y":
		print("")
		print("Current Software")
		print("-------------------")
		for i in originalItem.software:
			print(i)
		print("")
		softwareItems = []
		softwareItems = softwareRemove(originalItem)
		allItems = False
		while not allItems:
			if input(color.yellow("Would you like to add a new software for this lab? y/N ")).lower() == "y":
				print("")
				masterList = getValidList(softwareSource)
				print("")
				print("Valid Software")
				printList(masterList)
				softwareItems.append(getNewSoftware(masterList))
			else:
				allItems = True
		softwareItems = list(set(softwareItems))
	else:
		softwareItems = originalItem.software
	return softwareItems

def softwareRemove(originalItem):
	'''
	Removes unwanted software

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
	
	Return:
		softwareItems (list) wanted software
	'''
	softwareItems = []
	if originalItem.software:
		for i in originalItem.software:
	 		if not input(color.yellow("Would you like to remove \"" + i + "\" as needed software? If so enter 'delete': ")).lower() == "delete":
		 		softwareItems.append(i)	 			
	return softwareItems

def getNewSoftware(masterList):
	'''
	Get list of software from user and check if they are valid

	Args: 
		masterList (list) complete pool of valid topics

	Return:
		software (str) single valid software for new lab
	'''
	valid = False
	while not valid:
		item = input(color.yellow("Enter new software: "))
		for i in masterList:
			if i.lower() == item.lower():
		 		valid = True
		 		item = i
		 		print("Adding " + i + " to software")
		 		print("")
		if not valid:
			print(color.cyan(item + " is invalid software."))
			if not input(color.yellow("Would you like to try again? Y/n ")).lower() == "n":
	 			continue
			else:
				break
	return item

def getValidList(listSource):
	'''
	Generates list of valid selections from file

	Args:
		listSource (string) path to file containing valid list entries

	Return:
		validList (list) list of valid selections

	'''
	validList = open(listSource).readlines()
	for i in range (0,len(validList)):
		validList[i] =  validList[i].replace('\n','').strip()
	validList = list(filter(None, validList))
	return validList

def getDisciplineList(originalItem,disciplineSource):
	'''
	generates a list of disciplines

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
		disciplineSource (string) path to file containing list of disciplines

	Return:
		disciplineItems (list) valid disciplines
	'''
	disciplineItems = []
	if input(color.yellow("Would you like to edit the disciplines list for this lab? y/N ")).lower() == "y":
		print("")
		print("Current Disciplines")
		print("-------------------")
		for i in originalItem.disciplines:
			print(i)
		print("")
		disciplineItems = []
		disciplineItems = disciplineRemove(originalItem)
		allItems = False
		while not allItems:
			if input(color.yellow("Would you like to add a new discipline for this lab? y/N ")).lower() == "y":
				print("")
				masterList = getValidList(disciplineSource)
				print("")
				print("Valid Disciplines")
				printList(masterList)
				disciplineItems.append(getNewDisciplines(masterList))
			else:
				allItems = True
		disciplineItems = list(set(disciplineItems))
	else:
		disciplineItems = originalItem.disciplines
	return disciplineItems

def disciplineRemove(originalItem):
	'''
	Removes unwanted disciplines 

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
	
	Return:
		disciplineItems (list) wanted disciplines
	'''
	disciplineItems = []
	if originalItem.disciplines:
		for i in originalItem.disciplines:
	 		if not input(color.yellow("Would you like to remove \"" + i + "\" as a discipline? If so enter 'delete': ")).lower() == "delete":
		 		disciplineItems.append(i)	 			
	return disciplineItems

def getNewDisciplines(masterList):
	'''
	Get list of disciplines from user and check if they are valid

	Args: 
		masterList (list) complete pool of valid topics

	Return:
		disciplines (str) single valid discipline for new lab
	'''
	valid = False
	while not valid:
		item = input("Enter new discipline: ")
		for i in masterList:
			if i.lower() == item.lower():
		 		valid = True
		 		item = i
		 		print("Adding " + i + " to disciplines")
		 		print("")
		if not valid:
			print(color.cyan(item + " is an invalid discipline."))
			if not input(color.yellow("Would you like to try again? Y/n ")).lower() == "n":
	 			continue
			else:
				break
	return item

def getTopicList(originalItem,topicSource):
	'''
	generates a list of topics

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
		topicSource (string) path to file containing list of topics

	Return:
		topicItems (list) valid topics
	'''
	topicItems = []
	if input(color.yellow("Would you like to edit the topics list for this lab? y/N ")).lower() == "y":
		print("")
		print("Current Topics")
		print("-------------------")
		for i in originalItem.topics:
			print(i)
		print("")
		topicItems = []
		topicItems = topicRemove(originalItem)
		print("")
		allItems = False
		while not allItems:
			if input(color.yellow("Would you like to add a new topic for this lab? y/N ")).lower() == "y":
				print("")
				masterList = getValidList(topicSource)
				print("")
				print("Valid Topics")
				printList(masterList)
				topicItems.append(getNewTopic(topicSource,masterList))
			else:
				allItems = True
		topicItems = list(set(topicItems))
	else:
		topicItems = originalItem.topics
	return topicItems

def topicRemove(originalItem):
	'''
	Removes unwanted topics 

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
	
	Return:
		topicItems (list) wanted topics
	'''
	topicItems = []
	if originalItem.topics:
		for i in originalItem.topics:
	 		if not input(color.yellow("Would you like to remove \"" + i + "\" as a topic? If so enter 'delete': ")).lower() == "delete":
		 		topicItems.append(i)	 			
	return topicItems

def getNewTopic(topicSource,masterList):
	'''
	Get list of topics from user and check if they are valid

	Args: 
		topicSource (string) path to file containing list of disciplines
		masterList (list) complete pool of valid topics

	Return:
		topics (str) single valid topic
	'''
	valid = False
	while not valid:
		item = input(color.yellow("Enter new topic: "))
		for i in masterList:
			if i.replace("'","").lower() == item.replace("'","").lower():
		 		valid = True
		 		item = i
		 		print(item)
		 		print("Adding " + i + " to topics")
		 		print("")
		if not valid:
			print(color.cyan(item + " is an invalid topic."))
			if not input(color.yellow("Would you like to try again? Y/n ")).lower() == "n":
	 			continue
			else:
				break
	return item

def printList(lst):
	'''
	Prints a list of strings line by line for easy readability

	Args:
		lst (list) list of strings to be printed

	Return:
		none
	'''
	print("-------------------")
	for i in lst:
		print(i)
	print("")

def confirmEntry(new_version):
	'''
	print out what information entered by usee, and asks for confirmation

	Args:
		new_version (dict) dictionary containing all data in for that pjlDB can enter into database

	Return:
		(bool) True if information has been confirmed by user
	'''
	print("")

	print(color.yellow("Please confirm that the information entered is correct"))
	print("lab id: " + new_version["idnum"])
	print("name: " + new_version["name"])
	print("type: " + new_version["type"])
	print("original Directory: " + new_version["originalDir"])
	print("course: " + new_version["course"])
	print("semester: " + new_version["semester"])
	print("year: " + new_version["year"])
	print("directory: " + new_version["directory"])
	print("path: " + new_version["path"])
	print("equipment: ")
	printList(new_version["equipment"])
	print("disciplines: ")
	printList(new_version["disciplines"])
	print("topics: ")
	printList(new_version["topics"])
	if not input(color.yellow("Is this information correct? N/y: ")).lower() == "y":
		print("exiting...")
		exit()

def	validDB(info,lab,labdb):
	'''
	adds lab object to database and checks that database is valid

	Args:
		info (dict) information about new lab object
		lab (pjlDB._LabItem) individual lab item generated by pjlDB
		labdb (pjlDB.LabDB) entire lab database object generated by pjlDB

	Return:
		(bool) True if labDB object is valid
	'''
	lab.id_num = info["idnum"]
	lab.name = info["name"]
	lab.lab_type = info["type"]
	lab.equipment = info["equipment"]
	lab.software = info["software"]
	lab.disciplines = info["disciplines"]
	lab.topics = info["topics"]
	lab.addVersion(info)
	valid = labdb.validateFull()
	if valid:
		return valid
	else:
		return False


#Functions for moving directory into repository

def validDir(info,root):
	'''
	checks that the verison has not already been added to repository file structure

	Args:
		info (dict) information about new lab object
		root (str) root path of lab repository

	Return:
		(bool) True is lab has not already been added to repository file structure
	'''
	versionDir = root + info["directory"]
	if not os.path.isdir(versionDir):
		return True
	else: 
		print(color.cyan("Lab folder " + versionDir + " Already Exists."))
		print("Exiting...")
		return False

def moveVersionDir(info,root):
	'''
	adds source file to lab repository.
		Makes new directory
		rsyncs files except for contents of Support_Docs folder

	Args:
		info (dict) information about new lab object
		root (str) root path of lab repository

	Return:
		none
	'''
	versionDir = root + info["directory"]
	if not os.path.isdir(versionDir):
		os.system("mkdir " + versionDir)
		#os.system("echo rsync -avz --exclude Support_Docs " + info["originalDir"] + " " + versionDir)
		os.system("sudo rsync -avz --exclude Support_Docs " + info["originalDir"] + " " + versionDir)
	else:
		print("") 
		print(color.cyan("Lab folder " + versionDir + " Already Exists."))
		print("")
		if input(color.yellow("Do you want to update the folder contents? N/y: ")).lower() == "y":
			print("")
			os.system("rsync -avz --exclude Support_Docs " + info["originalDir"] + " " + versionDir)
		else:
			print("Exiting...")
			exit()

#Functions for updating Support_Docs

def addSupportFolder(info,root):
	'''
	adds contents of Support_Docs folder to repository

	Args:
		info (dict) information about new lab object

	Return:
		none
	'''
	originDir = info["originalDir"] + "Support_Docs"
	destinationDir = root + info["labFolder"] + "/Support_Docs"
	if os.path.isdir(originDir):
		if not os.path.isdir(destinationDir):
			print("Support_Docs Folder does not exist. Adding new folder " + destinationDir)
			os.system("mkdir " + destinationDir)
		if os.path.isdir(destinationDir):
			os.system("rsync -avz " + originDir + "/ " + destinationDir)
		else:
			print(color.red("Something when wrong. Exiting..."))
			exit()


# Functions for adding a new lab

def getNewLabInfo(originalItem,testMode):
	'''
	Main function that collects information for new lab entry

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
		validCourses (list) list of valid courses
		validSemesters (list) list of valid semesters
		semesterKeys (dict) dictionary that matches semesters with their abreviations
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		disiplineSource (str) path of file that contains all valid disciplines
		topicSource (str) path of file that contains all valid topics
		testMode (bool) allows script to be run in testing mode. No output written.
	
	Return:
		new_lab (dict) dictionary that contains information needed for pjlDB package to create new lab object
		labFolder (str) path of parent folder to create for new lab
	'''
	new_lab = {}
	new_versions = []
	new_version = {}
	new_lab["idnum"] = originalItem.id_num
	print("Adding new lab with id number: [" + new_lab["idnum"] + "]")
	print("-------------------------------------")
	print("")
	new_lab["name"] = getName(originalItem)
	print("")
	new_lab["type"] = getType()
	print("")
	new_lab["originalDir"] = getOriginalDir()
	print("")	
	new_lab["pdf"] = getOriginalPdf(new_lab["originalDir"])
	print("")
	new_lab["course"] = validCourse(validCourses)
	print("")
	new_lab["semester"] = validSemester(validSemesters) 
	print("")
	new_lab["year"] = validYear()
	print("")
	new_version
	new_lab["labFolder"],new_lab["labFolderPath"] = newLabFolder(new_lab)
	print("---------------------")
	print(new_lab["labFolderPath"])
	print(new_lab["labFolder"])
	new_lab["directory"] = versionFolder(new_lab,semesterKeys)
	print(new_lab["directory"])
	new_lab["path"] = validPdfPath(new_lab)
	# # Start tmp code
	# new_lab = {'idnum': '0189', 'name': 'NEW-NAME', 'type': 'Lab', 'originalDir': '/home/pgimby/labs/under-construction/365/ready/tutorial-lab/', 'pdf': 'Interference-Numerical-F2019.pdf', 'course': 'PHYS 365', 'semester': 'Fall', 'year': '2019', 'labFolder': '/data/repository/0189-NEW-NAME', 'labFolderPath': '/usr/local/master/pjl-web/data/repository/0189-NEW-NAME', 'directory': '/data/repository/0189-NEW-NAME/0189-PHYS365FA2019', 'path': '/data/repository/0189-NEW-NAME/0189-PHYS365FA2019/Interference-Numerical-F2019.pdf'}
	# # End Tmp code	
	new_lab["equipment"] = getEquipList(eqdb,originalItem)
	print("")
	new_lab["software"] = getSoftwareList(originalItem,softwareSource)
	print("")
	new_lab['disciplines'] = getDisciplineList(originalItem,disciplineSource)
	print("")
	new_lab['topics'] = getTopicList(originalItem,topicSource)
	new_version["path"] = new_lab["path"]
	new_version["year"] = new_lab["year"]
	new_version["semester"] = new_lab["semester"]
	new_version["course"] = new_lab["course"]
	new_version["directory"] = new_lab["directory"]
	new_versions.append(new_version)
	new_lab["versions"] = new_versions
	return new_lab

def getName(originalItem):
	'''
	Asks user to enter name of new lab, and check that the name is not already used

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB

	Return: 
		labName (str) name of new lab
	'''
	labName = originalItem.name
	if originalItem.name == "":
		validName = False
		while not validName:
			labName = str(input(color.yellow("Enter name of the new lab. Please use conventional titlecase (ie. This is a Title of a New Lab): ")))
			if input(color.yellow("Is this name entered correctly? N/y: ")).lower() == "y":
				validName = True
			elif input(color.yellow("Would you like to try again? Y/n ")).lower() == "n":
				print("Exiting.")
				exit()
	return labName

def getType():
	'''
	asks user what type of experiment this is. There are only two options lab or labatorial

	Args:
		none

	Return (str) type experiment. lab or labatorial
	'''
	validType = False
	while not validType:
		labType = input(color.yellow("Is this a lab or a labatorial? ")).lower()
		if labType == "lab" or labType == "labatorial":
			validType = True
		else:
			if input(color.yellow("Would you like to try again? Y/n: ")).lower() == "n":
				exit()
	return labType.capitalize()

def newLabFolder(info):
	'''
	determine name of folder for a new lab

	Args:
		info (dict) information about new lab object
	'''
	name = "-".join(info["name"].split(" "))
	labFolder = "/data/repository/" + info["idnum"] + "-" + name
	labFolderPath = root + labFolder
	return labFolder,labFolderPath

def versionFolder(info,semesterKeys):
	'''
	determine name of folder for a new lab. This is different than the function
	(validExistingDirectory) which uses knowledge of existing version folders.

	Args:
		info (dict) information about new lab object
		labFolder (str) path of the new lab parent folder in repository
		semesterKeys (dict) matches full name semesters with abreviation

	Return:
		directory (str) path of version directory for a new lab
	'''
	semester = semesterKeys[info["semester"]]
	courseNum = info["course"].split(" ")[-1]
	directory = info["labFolder"] + "/" + info["idnum"] + "-PHYS" + courseNum + semester + info["year"] 
	return directory

def validNewLab(info,lab,labdb):
	'''
	adds lab object to database and checks that database is valid

	Args:
		info (dict) information about new lab object
		lab (pjlDB._LabItem) individual lab item generated by pjlDB
		labdb (pjlDB.LabDB) entire lab database object generated by pjlDB

	Return:
		(bool) True if labDB object is valid
	'''
	lab.id_num = info["idnum"]
	lab.name = info["name"]
	lab.lab_type = info["type"]
	lab.equipment = info["equipment"]
	lab.software = info["software"]
	lab.disciplines = info["disciplines"]
	lab.topics = info["topics"]
	lab.versions = info["versions"]
	labdb.addLab(lab)
	valid = labdb.validateFull()
	if valid:
		return valid
	else:
		return False

# Functions for editing existing xml entries

def getEditInfo(originalItem,eqdb,disciplineSource,topicSource,softwareSource,testMode):
	'''
	Main function that collects information for new version of lab entry

	Args:
		originalItem (pjlDB._LabItem) individual lab item generated by pjlDB
		eqdb (pjlDB.EquipDB) entire equipment inventory database object generated by pjlDB
		disiplineSource (str) path of file that contains all valid disciplines
		topicSource (str) path of file that contains all valid topics
		testMode (bool) allows script to be run in testing mode. No output written.
	
	Return:
		originalItem (pjlDB._LabItem) updated individual lab item
		updatedVersion (dict) new information related to an updated version
	'''
	if debug: print(color.green("[Debug - getEditInfo]  entering"))
	print("Editing info for \"" + originalItem.name + "\".")
	originalItem.equipment = getEquipList(eqdb,originalItem)
	print("")
	originalItem.software = getSoftwareList(originalItem,softwareSource)
	print("")
	originalItem.disciplines = getDisciplineList(originalItem,disciplineSource)
	print("")
	originalItem.topics = getTopicList(originalItem,topicSource)
	print("")
	updatedVersion = {}
	if input(color.yellow("Would you like to updated a version of  lab? y/N ")).lower() == "y":
#		if not testMode:
		updatedVersion = updateVersionInfo(originalItem)
		originalItem.versions = updateVersion(originalItem,updatedVersion)
#		else:
#			updatedVersion = {'course': 'PHYS 227', 'semester': 'Fall', 'year': '2019', 'originalDir': '/home/pgimby/labs/under-construction/227FA2019/0023/', 'pdf': 'Lab-01-IntroToComputationalModelling.pdf', 'directory': '/data/repository/0023-Introduction-to-3D-Computational-Modelling/0023-PHYS227FA2019', 'labFolder': '/data/repository/0023-Introduction-to-3D-Computational-Modelling/', 'path': '/data/repository/0023-Introduction-to-3D-Computational-Modelling/0023-PHYS227FA2019/Lab-01-IntroToComputationalModelling.pdf'}
#			tmp = updateVersion(originalItem,updatedVersion)
#			print("")
			#moveVersionDir(updatedVersion,root)
			#tmp2 = validDB(updatedVersion,originalItem,labdb)
			#print(tmp2)
	return originalItem, updatedVersion

def displayLabItem(lab):
	print("")
	print(color.yellow("Please confirm that the information entered is correct."))
	print("-------------------------------------------------------")
	print("lab id: " + lab.id_num)
	print("")
	print("name: " + lab.name)
	print("")
	print("type: " + lab.lab_type)
	print("")
	print("equipment: ")
	print("----------")
	printEquipList(lab.equipment)
	print("")
	print("disciplines: ")
	printList(lab.disciplines)
	print("topics: ")
	printList(lab.topics)
	if input(color.yellow("Is this information correct? N/y: ")).lower() == "y":
		return True
	else:
		print("exiting...")
		return
		exit()


def printEquipList(equipList):
	for i in equipList:
		print(i["id"] +": " + i["name"] + " (" + i["amount"] + "), " + i["alt-id"] + ": " +  i["alt-name"])


# Functions for updating an existing version of a lab. 

def getDeploymentID(version):
	'''
	Takes a dictionaries containing version of a lab, and pulls out a unique 
	identifier based on when a version was deployed, and in what course.
	The result is in the form 227FA2019.

	Args:
		version (dict)

	Return:
		deploymentId (string) unique identifer for when and where lab was used.
	'''
	course = version["course"][5:]
	year = version["year"]
	semester = version["semester"]
	key = semesterKeys[semester]
	deploymentId = course + key + year
	return deploymentId

def updateVersionInfo(originalItem):
	'''
	Gathers information from the user as to what file to update, and where to 
	find the new version

	Args:
		originalItem (pjlDB._LabItem) original lab object

	Return:
		updatedVersion (dict) dictionary containing information about updated
		lab version.
	'''
	print("")
	updatedVersion = {}
	updatedVersion["course"] = validCourse(validCourses)
	print("")
	updatedVersion["semester"] = validSemester(validSemesters) 
	print("")
	updatedVersion["year"] = validYear()
	print("")
	updatedVersion["originalDir"] = getOriginalDir()
	print("")	
	updatedVersion["pdf"] = getOriginalPdf(updatedVersion["originalDir"])
	print(updatedVersion["pdf"])
	updatedVersion["directory"],updatedVersion["labFolder"] = validExistingDirectory(updatedVersion,originalItem,semesterKeys)
	print("")
	updatedVersion["path"] = validPdfPath(updatedVersion)
	return updatedVersion


def updateVersion(originalItem,updatedVersionInfo):
	'''
	Takes a dictionaries containing versions of a lab, and replaces the pdf
	with the a new version as per user input

	Args:
		originalItem (pjlDB._LabItem) original lab object
		updatedVersionInfo (dict) updated information on the lab version

	Return:
		lab.versions (list) of dictionaries, one entry for each version.
	'''
	newDeployId = getDeploymentID(updatedVersionInfo)
	for i in lab.versions:
		if getDeploymentID(i) == newDeployId:
			i["path"] = updatedVersionInfo["path"]
	return lab.versions

#Main Script


'''List of valid courses and semesters'''
validCourses = ["211", "223", "227", "255", "259", "323", "325", "341", "365", "369", "375", "397", "497"]
validSemesters = ["Winter", "Spring", "Summer", "Fall"]
semesterKeys = {"Winter": "WI", "Spring": "SP", "Summer": "SU", "Fall": "FA"}


'''Define user options'''
parser = argparse.ArgumentParser(
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog='''
Know bugs and other important information:
------------------
	A) Blank Topics or Discplies was causing issures. I think
	B) Spaces in the names of folders does not work.
	C) Review does not include software.
	D) Cannot add additional docs.
	E) Kit alternate name does not accept bad input nicely
	F) Edited equipment items not getting added back in
''')
parser.add_argument('-a', '--add', help='Add a new version to an existing lab.".', action='store_true')
parser.add_argument('-d', '--debug', help='debug code', action='store_true')
parser.add_argument('-e', '--edit', help='Edit the details of a lab.', action='store_true')
parser.add_argument('-n', '--new', help='Add a brand new lab.".', action='store_true')
parser.add_argument('-t', '--test', help='Debug mode.', action='store_true')
parser.add_argument('-x', '--validate', help='Disable validation for xml.', action='store_true')
parser.add_argument('-v', '--version', help='Print current verion of script.', action='store_true')
args = parser.parse_args()
testMode = args.test
validate = args.validate

'''Paths for  files'''
root = "/usr/local/master/pjl-web"
eqdbDev = root + "/dev/equipmentDB.xml"
labdbDev = root + "/dev/labDB.xml"
eqdbData = root + "/data/equipmentDB.xml"
labdbData = root + "/data/labDB.xml"
disciplineSource = root + "/data/validDisciplines.txt"
topicSource = root + "/data/validTopics.txt"
softwareSource = root + "/data/validSoftware.txt"

'''check if running in debug mode'''
debug = args.debug

'''Changes the output to a temporary file if script is run in test mode'''
if testMode:
	destXML = root + "/dev/test_labDB.xml"
	print("----------Running in test mode.----------")	
else:
	destXML= labdbDev

'''validation disabled warning'''
if validate:
	print("validation of output file has been disabled. Be Very Careful!")

'''name of host machine this scipt was written for'''
#devhost = "slug"
devhost = ["slug","fry"]


'''Confirm that this script won't accidently run on the wrong machine'''
testHost(devhost)


'''Create pjlDB object of each of the relevent xml files'''
eqdb = pjlDB.EquipDB(eqdbDev)
labdb = pjlDB.LabDB(labdbDev)


'''prints version'''
if args.version:
	print("Version " + version)
	exit()


'''Checks that the development version of both key DBs are new or as new as the live versions.'''
if not checkTimeStamp(eqdbDev,eqdbData) or not checkTimeStamp(labdbDev,labdbData):
	if not checkTimeStamp(eqdbDev,eqdbData):
		print("Equipment development database is out of synce with the live version. Please update the development version before continuing.")
	if not checkTimeStamp(labdbDev,labdbData):
		print("Repository development database is out of synce with the live version. Please update the development version before continuing.")
	print("Exiting...")
	exit()

'''add a new version of an existing lab'''
if args.add:
	print("Adding new lab version.")
	lab = getLabObject(labdb)
	versionInfo = getVersionInfo(lab,validCourses,validSemesters,semesterKeys,eqdb,disciplineSource,topicSource,softwareSource,testMode)
	confirmEntry(versionInfo)
	if validDB(versionInfo,lab,labdb) and validDir(versionInfo,root):
		labdb.save(destXML, ignore_validation=validate, error_log=True)
		if not testMode:
			moveVersionDir(versionInfo,root)
			addSupportFolder(versionInfo,root)
	else:
		print("something when wrong")
		exit()

'''create a new lab'''
if args.new:
	print("Adding new lab.")
	lab = labdb.newLab(labdb.new_id)
	newLabInfo = getNewLabInfo(lab,testMode)
	lab.name = newLabInfo["name"]
	lab.type = newLabInfo["type"]
	confirmEntry(newLabInfo)
	if validDB(newLabInfo,lab,labdb):
		if not testMode:
			os.system("mkdir " + newLabInfo["labFolderPath"])
			moveVersionDir(newLabInfo,root)
			addSupportFolder(newLabInfo,root)
			labdb.addLab(lab)
			labdb.save(destXML, ignore_validation=validate, error_log=True)
		else:
			os.system("echo mkdir " + newLabInfo["labFolder"])
			labdb.addLab(lab)
			labdb.save(destXML, ignore_validation=validate, error_log=True)


if args.edit:
	print("Editing existing lab.")
	lab = getLabObject(labdb)
	if debug: print(color.green("[Debug - edit] "))
	lab, versionInfo = getEditInfo(lab,eqdb,disciplineSource,topicSource,softwareSource,testMode)
	if displayLabItem(lab):
		labdb.save(destXML, ignore_validation=validate, error_log=True)
		if bool(versionInfo):
			moveVersionDir(versionInfo,root)
	
'''confirms that the script has ended properly'''
print("...and then there will be cake")
